// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: mstscax.dll

[
    uuid(8C11EFA1-92C3-11D1-BC1E-00C04FA31489),
        version(1.0),
        helpstring("Microsoft Terminal Services Control Type Library")
]
library MSTSCLib
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    dispinterface IMsTscAxEvents;
    interface IMsRdpClient;
    interface IMsTscAx;
    interface IMsTscAx_Redist;
    interface IMsTscSecuredSettings;
    interface IMsTscAdvancedSettings;
    interface IMsTscDebug;
    interface IMsRdpClientAdvancedSettings;
    interface IMsRdpClientSecuredSettings;
    interface IMsTscNonScriptable;
    interface IMsRdpClientNonScriptable;
    interface IMsRdpClient2;
    interface IMsRdpClientAdvancedSettings2;
    interface IMsRdpClient3;
    interface IMsRdpClientAdvancedSettings3;
    interface IMsRdpClient4;
    interface IMsRdpClientAdvancedSettings4;
    interface IMsRdpClientNonScriptable2;
    interface IMsRdpClient5;
    interface IMsRdpClientTransportSettings;
    interface IMsRdpClientAdvancedSettings5;
    interface ITSRemoteProgram;
    interface IMsRdpClientShell;
    interface IMsRdpClientNonScriptable3;
    interface IMsRdpDeviceCollection;
    interface IMsRdpDevice;
    interface IMsRdpDriveCollection;
    interface IMsRdpDrive;
    interface IMsRdpClient6;
    interface IMsRdpClientAdvancedSettings6;
    interface IMsRdpClientTransportSettings2;
    interface IMsRdpClientNonScriptable4;
    interface IMsRdpClient7;
    interface IMsRdpClientAdvancedSettings7;
    interface IMsRdpClientTransportSettings3;
    interface IMsRdpClientSecuredSettings2;
    interface ITSRemoteProgram2;
    interface IMsRdpClientNonScriptable5;
    interface IMsRdpPreferredRedirectionInfo;
    interface IMsRdpExtendedSettings;
    interface IMsRdpClient8;
    interface IMsRdpClientAdvancedSettings8;
    interface IMsRdpClient9;
    interface IMsRdpClientTransportSettings4;
    interface IMsRdpClient10;
    interface ITSRemoteProgram3;
    interface IMsRdpClientNonScriptable6;
    interface IMsRdpClientNonScriptable7;
    interface IMsRdpCameraRedirConfigCollection;
    interface IMsRdpCameraRedirConfig;
    interface IMsRdpClipboard;
    interface IMsRdpClientNonScriptable8;
    dispinterface IRemoteDesktopClientEvents;
    interface IRemoteDesktopClient;
    interface IRemoteDesktopClientSettings;
    interface IRemoteDesktopClientActions;
    interface IRemoteDesktopClientTouchPointer;

    [
        uuid(336D5562-EFA8-482E-8CB3-C5C0FC7A7DB6)
    ]
        dispinterface IMsTscAxEvents{
            properties:
            methods:
                [id(0x00000001)]
                void OnConnecting();
                [id(0x00000002)]
                void OnConnected();
                [id(0x00000003)]
                void OnLoginComplete();
                [id(0x00000004)]
                void OnDisconnected([in] long discReason);
                [id(0x00000005)]
                void OnEnterFullScreenMode();
                [id(0x00000006)]
                void OnLeaveFullScreenMode();
                [id(0x00000007)]
                void OnChannelReceivedData(
                                [in] BSTR chanName,
                                [in] BSTR data);
                [id(0x00000008)]
                void OnRequestGoFullScreen();
                [id(0x00000009)]
                void OnRequestLeaveFullScreen();
                [id(0x0000000a)]
                void OnFatalError([in] long errorCode);
                [id(0x0000000b)]
                void OnWarning([in] long warningCode);
                [id(0x0000000c)]
                void OnRemoteDesktopSizeChange(
                                [in] long width,
                                [in] long height);
                [id(0x0000000d)]
                void OnIdleTimeoutNotification();
                [id(0x0000000e)]
                void OnRequestContainerMinimize();
                [id(0x0000000f)]
                void OnConfirmClose([out, retval] VARIANT_BOOL* pfAllowClose);
                [id(0x00000010)]
                void OnReceivedTSPublicKey(
                                [in] BSTR publicKey,
                                [out, retval] VARIANT_BOOL* pfContinueLogon);
                [id(0x00000011)]
                void OnAutoReconnecting(
                                [in] long disconnectReason,
                                [in] long attemptCount,
                                [out, retval] AutoReconnectContinueState* pArcContinueStatus);
                [id(0x00000012)]
                void OnAuthenticationWarningDisplayed();
                [id(0x00000013)]
                void OnAuthenticationWarningDismissed();
                [id(0x00000014)]
                void OnRemoteProgramResult(
                                [in] BSTR bstrRemoteProgram,
                                [in] RemoteProgramResult lError,
                                [in] VARIANT_BOOL vbIsExecutable);
                [id(0x00000015)]
                void OnRemoteProgramDisplayed(
                                [in] VARIANT_BOOL vbDisplayed,
                                [in] unsigned long uDisplayInformation);
                [id(0x0000001d)]
                void OnRemoteWindowDisplayed(
                                [in] VARIANT_BOOL vbDisplayed,
                                [in] wireHWND hwnd,
                                [in] RemoteWindowDisplayedAttribute windowAttribute);
                [id(0x00000016)]
                void OnLogonError([in] long lError);
                [id(0x00000017)]
                void OnFocusReleased([in] int iDirection);
                [id(0x00000018)]
                void OnUserNameAcquired([in] BSTR bstrUserName);
                [id(0x0000001a)]
                void OnMouseInputModeChanged([in] VARIANT_BOOL fMouseModeRelative);
                [id(0x0000001c)]
                void OnServiceMessageReceived([in] BSTR serviceMessage);
                [id(0x0000001e)]
                void OnConnectionBarPullDown();
                [id(0x00000020)]
                void OnNetworkStatusChanged(
                                [in] unsigned long qualityLevel,
                                [in] long bandwidth,
                                [in] long rtt);
                [id(0x00000023)]
                void OnDevicesButtonPressed();
                [id(0x00000021)]
                void OnAutoReconnected();
                [id(0x00000022)]
                void OnAutoReconnecting2(
                                [in] long disconnectReason,
                                [in] VARIANT_BOOL networkAvailable,
                                [in] long attemptCount,
                                [in] long maxAttemptCount);
    };

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0045_0001 AutoReconnectContinueState;

    typedef enum {
        autoReconnectContinueAutomatic = 0,
        autoReconnectContinueStop = 1,
        autoReconnectContinueManual = 2
    } __MIDL___MIDL_itf_mstsax_0000_0045_0001;

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0059_0001 RemoteProgramResult;

    typedef enum {
        remoteAppResultOk = 0,
        remoteAppResultLocked = 1,
        remoteAppResultProtocolError = 2,
        remoteAppResultNotInWhitelist = 3,
        remoteAppResultNetworkPathDenied = 4,
        remoteAppResultFileNotFound = 5,
        remoteAppResultFailure = 6,
        remoteAppResultHookNotLoaded = 7
    } __MIDL___MIDL_itf_mstsax_0000_0059_0001;

    typedef [public]
        _RemotableHandle* wireHWND;

    typedef struct tag_RemotableHandle {

        long fContext;

        __MIDL_IWinTypes_0009 u;
    } _RemotableHandle;

    typedef union tag__MIDL_IWinTypes_0009 {

        long hInproc;

        long hRemote;
    } __MIDL_IWinTypes_0009;

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0059_0002 RemoteWindowDisplayedAttribute;

    typedef enum {
        remoteAppWindowNone = 0,
        remoteAppWindowDisplayed = 1,
        remoteAppShellIconDisplayed = 2
    } __MIDL___MIDL_itf_mstsax_0000_0059_0002;

    [
        uuid(A41A4187-5A86-4E26-B40A-856F9035D9CB),
            helpstring("Microsoft Terminal Services Client Control - version 1"),
            control
    ]
        coclass MsTscAxNotSafeForScripting {
        interface IMsRdpClient;
        [default] interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        odl,
            uuid(92B4A539-7115-4B7C-A5A9-E5D9EFC2780A),
            dual,
            oleautomation
    ]
        interface IMsRdpClient : IMsTscAx {
        [id(0x00000064), propput]
            HRESULT ColorDepth([in] long pcolorDepth);
        [id(0x00000064), propget]
            HRESULT ColorDepth([out, retval] long* pcolorDepth);
        [id(0x00000065), propget]
            HRESULT AdvancedSettings2([out, retval] IMsRdpClientAdvancedSettings** ppAdvSettings);
        [id(0x00000066), propget]
            HRESULT SecuredSettings2([out, retval] IMsRdpClientSecuredSettings** ppSecuredSettings);
        [id(0x00000067), propget]
            HRESULT ExtendedDisconnectReason([out, retval] ExtendedDisconnectReasonCode* pExtendedDisconnectReason);
        [id(0x00000068), propput]
            HRESULT FullScreen([in] VARIANT_BOOL pfFullScreen);
        [id(0x00000068), propget]
            HRESULT FullScreen([out, retval] VARIANT_BOOL* pfFullScreen);
        [id(0x00000023)]
            HRESULT SetVirtualChannelOptions(
                [in] BSTR chanName,
                [in] long chanOptions);
        [id(0x00000024)]
            HRESULT GetVirtualChannelOptions(
                [in] BSTR chanName,
                [out, retval] long* pChanOptions);
        [id(0x00000025)]
            HRESULT RequestClose([out, retval] ControlCloseStatus* pCloseStatus);
    };

    [
        odl,
            uuid(8C11EFAE-92C3-11D1-BC1E-00C04FA31489),
            dual,
            oleautomation
    ]
        interface IMsTscAx : IMsTscAx_Redist {
        [id(0x00000001), propput]
            HRESULT Server([in] BSTR pServer);
        [id(0x00000001), propget]
            HRESULT Server([out, retval] BSTR* pServer);
        [id(0x00000002), propput]
            HRESULT Domain([in] BSTR pDomain);
        [id(0x00000002), propget]
            HRESULT Domain([out, retval] BSTR* pDomain);
        [id(0x00000003), propput]
            HRESULT UserName([in] BSTR pUserName);
        [id(0x00000003), propget]
            HRESULT UserName([out, retval] BSTR* pUserName);
        [id(0x00000004), propput]
            HRESULT DisconnectedText([in] BSTR pDisconnectedText);
        [id(0x00000004), propget]
            HRESULT DisconnectedText([out, retval] BSTR* pDisconnectedText);
        [id(0x00000005), propput]
            HRESULT ConnectingText([in] BSTR pConnectingText);
        [id(0x00000005), propget]
            HRESULT ConnectingText([out, retval] BSTR* pConnectingText);
        [id(0x00000006), propget]
            HRESULT Connected([out, retval] short* pIsConnected);
        [id(0x0000000c), propput]
            HRESULT DesktopWidth([in] long pVal);
        [id(0x0000000c), propget]
            HRESULT DesktopWidth([out, retval] long* pVal);
        [id(0x0000000d), propput]
            HRESULT DesktopHeight([in] long pVal);
        [id(0x0000000d), propget]
            HRESULT DesktopHeight([out, retval] long* pVal);
        [id(0x00000010), propput]
            HRESULT StartConnected([in] long pfStartConnected);
        [id(0x00000010), propget]
            HRESULT StartConnected([out, retval] long* pfStartConnected);
        [id(0x00000011), propget]
            HRESULT HorizontalScrollBarVisible([out, retval] long* pfHScrollVisible);
        [id(0x00000012), propget]
            HRESULT VerticalScrollBarVisible([out, retval] long* pfVScrollVisible);
        [id(0x00000013), propput]
            HRESULT FullScreenTitle([in] BSTR rhs);
        [id(0x00000014), propget]
            HRESULT CipherStrength([out, retval] long* pCipherStrength);
        [id(0x00000015), propget]
            HRESULT Version([out, retval] BSTR* pVersion);
        [id(0x00000016), propget]
            HRESULT SecuredSettingsEnabled([out, retval] long* pSecuredSettingsEnabled);
        [id(0x00000061), propget]
            HRESULT SecuredSettings([out, retval] IMsTscSecuredSettings** ppSecuredSettings);
        [id(0x00000062), propget]
            HRESULT AdvancedSettings([out, retval] IMsTscAdvancedSettings** ppAdvSettings);
        [id(0x00000063), propget, hidden]
            HRESULT Debugger([out, retval] IMsTscDebug** ppDebugger);
        [id(0x0000001e)]
            HRESULT Connect();
        [id(0x0000001f)]
            HRESULT Disconnect();
        [id(0x00000021)]
            HRESULT CreateVirtualChannels([in] BSTR newVal);
        [id(0x00000022)]
            HRESULT SendOnVirtualChannel(
                [in] BSTR chanName,
                [in] BSTR ChanData);
    };

    [
        odl,
            uuid(327BB5CD-834E-4400-AEF2-B30E15E5D682),
            dual,
            oleautomation
    ]
        interface IMsTscAx_Redist : IDispatch {
    };

    [
        odl,
            uuid(C9D65442-A0F9-45B2-8F73-D61D2DB8CBB6),
            dual,
            oleautomation
    ]
        interface IMsTscSecuredSettings : IDispatch {
        [id(0x00000001), propput]
            HRESULT StartProgram([in] BSTR pStartProgram);
        [id(0x00000001), propget]
            HRESULT StartProgram([out, retval] BSTR* pStartProgram);
        [id(0x00000002), propput]
            HRESULT WorkDir([in] BSTR pWorkDir);
        [id(0x00000002), propget]
            HRESULT WorkDir([out, retval] BSTR* pWorkDir);
        [id(0x00000003), propput]
            HRESULT FullScreen([in] long pfFullScreen);
        [id(0x00000003), propget]
            HRESULT FullScreen([out, retval] long* pfFullScreen);
    };

    [
        odl,
            uuid(809945CC-4B3B-4A92-A6B0-DBF9B5F2EF2D),
            dual,
            oleautomation
    ]
        interface IMsTscAdvancedSettings : IDispatch {
        [id(0x00000079), propput]
            HRESULT Compress([in] long pcompress);
        [id(0x00000079), propget]
            HRESULT Compress([out, retval] long* pcompress);
        [id(0x0000007a), propput]
            HRESULT BitmapPeristence([in] long pbitmapPeristence);
        [id(0x0000007a), propget]
            HRESULT BitmapPeristence([out, retval] long* pbitmapPeristence);
        [id(0x000000a1), propput]
            HRESULT allowBackgroundInput([in] long pallowBackgroundInput);
        [id(0x000000a1), propget]
            HRESULT allowBackgroundInput([out, retval] long* pallowBackgroundInput);
        [id(0x000000a2), propput]
            HRESULT KeyBoardLayoutStr([in] BSTR rhs);
        [id(0x000000aa), propput]
            HRESULT PluginDlls([in] BSTR rhs);
        [id(0x000000ab), propput]
            HRESULT IconFile([in] BSTR rhs);
        [id(0x000000ac), propput]
            HRESULT IconIndex([in] long rhs);
        [id(0x000000ad), propput]
            HRESULT ContainerHandledFullScreen([in] long pContainerHandledFullScreen);
        [id(0x000000ad), propget]
            HRESULT ContainerHandledFullScreen([out, retval] long* pContainerHandledFullScreen);
        [id(0x000000ae), propput]
            HRESULT DisableRdpdr([in] long pDisableRdpdr);
        [id(0x000000ae), propget]
            HRESULT DisableRdpdr([out, retval] long* pDisableRdpdr);
    };

    [
        odl,
            uuid(209D0EB9-6254-47B1-9033-A98DAE55BB27),
            hidden,
            dual,
            oleautomation
    ]
        interface IMsTscDebug : IDispatch {
        [id(0x000000c8), propput]
            HRESULT HatchBitmapPDU([in] long phatchBitmapPDU);
        [id(0x000000c8), propget]
            HRESULT HatchBitmapPDU([out, retval] long* phatchBitmapPDU);
        [id(0x000000c9), propput]
            HRESULT HatchSSBOrder([in] long phatchSSBOrder);
        [id(0x000000c9), propget]
            HRESULT HatchSSBOrder([out, retval] long* phatchSSBOrder);
        [id(0x000000ca), propput]
            HRESULT HatchMembltOrder([in] long phatchMembltOrder);
        [id(0x000000ca), propget]
            HRESULT HatchMembltOrder([out, retval] long* phatchMembltOrder);
        [id(0x000000cb), propput]
            HRESULT HatchIndexPDU([in] long phatchIndexPDU);
        [id(0x000000cb), propget]
            HRESULT HatchIndexPDU([out, retval] long* phatchIndexPDU);
        [id(0x000000cc), propput]
            HRESULT LabelMemblt([in] long plabelMemblt);
        [id(0x000000cc), propget]
            HRESULT LabelMemblt([out, retval] long* plabelMemblt);
        [id(0x000000cd), propput]
            HRESULT BitmapCacheMonitor([in] long pbitmapCacheMonitor);
        [id(0x000000cd), propget]
            HRESULT BitmapCacheMonitor([out, retval] long* pbitmapCacheMonitor);
        [id(0x000000ce), propput]
            HRESULT MallocFailuresPercent([in] long pmallocFailuresPercent);
        [id(0x000000ce), propget]
            HRESULT MallocFailuresPercent([out, retval] long* pmallocFailuresPercent);
        [id(0x000000cf), propput]
            HRESULT MallocHugeFailuresPercent([in] long pmallocHugeFailuresPercent);
        [id(0x000000cf), propget]
            HRESULT MallocHugeFailuresPercent([out, retval] long* pmallocHugeFailuresPercent);
        [id(0x000000d0), propput]
            HRESULT NetThroughput([in] long NetThroughput);
        [id(0x000000d0), propget]
            HRESULT NetThroughput([out, retval] long* NetThroughput);
        [id(0x000000d1), propput]
            HRESULT CLXCmdLine([in] BSTR pCLXCmdLine);
        [id(0x000000d1), propget]
            HRESULT CLXCmdLine([out, retval] BSTR* pCLXCmdLine);
        [id(0x000000d2), propput]
            HRESULT CLXDll([in] BSTR pCLXDll);
        [id(0x000000d2), propget]
            HRESULT CLXDll([out, retval] BSTR* pCLXDll);
        [id(0x000000d3), propput]
            HRESULT RemoteProgramsHatchVisibleRegion([in] long pcbHatch);
        [id(0x000000d3), propget]
            HRESULT RemoteProgramsHatchVisibleRegion([out, retval] long* pcbHatch);
        [id(0x000000d4), propput]
            HRESULT RemoteProgramsHatchVisibleNoDataRegion([in] long pcbHatch);
        [id(0x000000d4), propget]
            HRESULT RemoteProgramsHatchVisibleNoDataRegion([out, retval] long* pcbHatch);
        [id(0x000000d5), propput]
            HRESULT RemoteProgramsHatchNonVisibleRegion([in] long pcbHatch);
        [id(0x000000d5), propget]
            HRESULT RemoteProgramsHatchNonVisibleRegion([out, retval] long* pcbHatch);
        [id(0x000000d6), propput]
            HRESULT RemoteProgramsHatchWindow([in] long pcbHatch);
        [id(0x000000d6), propget]
            HRESULT RemoteProgramsHatchWindow([out, retval] long* pcbHatch);
        [id(0x000000d7), propput]
            HRESULT RemoteProgramsStayConnectOnBadCaps([in] long pcbStayConnected);
        [id(0x000000d7), propget]
            HRESULT RemoteProgramsStayConnectOnBadCaps([out, retval] long* pcbStayConnected);
        [id(0x000000d8), propget]
            HRESULT ControlType([out, retval] unsigned int* pControlType);
        [id(0x000000d9), propput]
            HRESULT DecodeGfx([in] VARIANT_BOOL rhs);
    };

    [
        odl,
            uuid(3C65B4AB-12B3-465B-ACD4-B8DAD3BFF9E2),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings : IMsTscAdvancedSettings {
        [id(0x00000065), propput]
            HRESULT SmoothScroll([in] long psmoothScroll);
        [id(0x00000065), propget]
            HRESULT SmoothScroll([out, retval] long* psmoothScroll);
        [id(0x00000066), propput]
            HRESULT AcceleratorPassthrough([in] long pacceleratorPassthrough);
        [id(0x00000066), propget]
            HRESULT AcceleratorPassthrough([out, retval] long* pacceleratorPassthrough);
        [id(0x00000067), propput]
            HRESULT ShadowBitmap([in] long pshadowBitmap);
        [id(0x00000067), propget]
            HRESULT ShadowBitmap([out, retval] long* pshadowBitmap);
        [id(0x00000068), propput]
            HRESULT TransportType([in] long ptransportType);
        [id(0x00000068), propget]
            HRESULT TransportType([out, retval] long* ptransportType);
        [id(0x00000069), propput]
            HRESULT SasSequence([in] long psasSequence);
        [id(0x00000069), propget]
            HRESULT SasSequence([out, retval] long* psasSequence);
        [id(0x0000006a), propput]
            HRESULT EncryptionEnabled([in] long pencryptionEnabled);
        [id(0x0000006a), propget]
            HRESULT EncryptionEnabled([out, retval] long* pencryptionEnabled);
        [id(0x0000006b), propput]
            HRESULT DedicatedTerminal([in] long pdedicatedTerminal);
        [id(0x0000006b), propget]
            HRESULT DedicatedTerminal([out, retval] long* pdedicatedTerminal);
        [id(0x0000006c), propput]
            HRESULT RDPPort([in] long prdpPort);
        [id(0x0000006c), propget]
            HRESULT RDPPort([out, retval] long* prdpPort);
        [id(0x0000006d), propput]
            HRESULT EnableMouse([in] long penableMouse);
        [id(0x0000006d), propget]
            HRESULT EnableMouse([out, retval] long* penableMouse);
        [id(0x0000006e), propput]
            HRESULT DisableCtrlAltDel([in] long pdisableCtrlAltDel);
        [id(0x0000006e), propget]
            HRESULT DisableCtrlAltDel([out, retval] long* pdisableCtrlAltDel);
        [id(0x0000006f), propput]
            HRESULT EnableWindowsKey([in] long penableWindowsKey);
        [id(0x0000006f), propget]
            HRESULT EnableWindowsKey([out, retval] long* penableWindowsKey);
        [id(0x00000070), propput]
            HRESULT DoubleClickDetect([in] long pdoubleClickDetect);
        [id(0x00000070), propget]
            HRESULT DoubleClickDetect([out, retval] long* pdoubleClickDetect);
        [id(0x00000071), propput]
            HRESULT MaximizeShell([in] long pmaximizeShell);
        [id(0x00000071), propget]
            HRESULT MaximizeShell([out, retval] long* pmaximizeShell);
        [id(0x00000072), propput]
            HRESULT HotKeyFullScreen([in] long photKeyFullScreen);
        [id(0x00000072), propget]
            HRESULT HotKeyFullScreen([out, retval] long* photKeyFullScreen);
        [id(0x00000073), propput]
            HRESULT HotKeyCtrlEsc([in] long photKeyCtrlEsc);
        [id(0x00000073), propget]
            HRESULT HotKeyCtrlEsc([out, retval] long* photKeyCtrlEsc);
        [id(0x00000074), propput]
            HRESULT HotKeyAltEsc([in] long photKeyAltEsc);
        [id(0x00000074), propget]
            HRESULT HotKeyAltEsc([out, retval] long* photKeyAltEsc);
        [id(0x00000075), propput]
            HRESULT HotKeyAltTab([in] long photKeyAltTab);
        [id(0x00000075), propget]
            HRESULT HotKeyAltTab([out, retval] long* photKeyAltTab);
        [id(0x00000076), propput]
            HRESULT HotKeyAltShiftTab([in] long photKeyAltShiftTab);
        [id(0x00000076), propget]
            HRESULT HotKeyAltShiftTab([out, retval] long* photKeyAltShiftTab);
        [id(0x00000077), propput]
            HRESULT HotKeyAltSpace([in] long photKeyAltSpace);
        [id(0x00000077), propget]
            HRESULT HotKeyAltSpace([out, retval] long* photKeyAltSpace);
        [id(0x00000078), propput]
            HRESULT HotKeyCtrlAltDel([in] long photKeyCtrlAltDel);
        [id(0x00000078), propget]
            HRESULT HotKeyCtrlAltDel([out, retval] long* photKeyCtrlAltDel);
        [id(0x0000007b), propput]
            HRESULT orderDrawThreshold([in] long porderDrawThreshold);
        [id(0x0000007b), propget]
            HRESULT orderDrawThreshold([out, retval] long* porderDrawThreshold);
        [id(0x0000007c), propput]
            HRESULT BitmapCacheSize([in] long pbitmapCacheSize);
        [id(0x0000007c), propget]
            HRESULT BitmapCacheSize([out, retval] long* pbitmapCacheSize);
        [id(0x0000007d), propput]
            HRESULT BitmapVirtualCacheSize([in] long pbitmapVirtualCacheSize);
        [id(0x0000007d), propget]
            HRESULT BitmapVirtualCacheSize([out, retval] long* pbitmapVirtualCacheSize);
        [id(0x000000af), propput]
            HRESULT ScaleBitmapCachesByBPP([in] long pbScale);
        [id(0x000000af), propget]
            HRESULT ScaleBitmapCachesByBPP([out, retval] long* pbScale);
        [id(0x0000007e), propput]
            HRESULT NumBitmapCaches([in] long pnumBitmapCaches);
        [id(0x0000007e), propget]
            HRESULT NumBitmapCaches([out, retval] long* pnumBitmapCaches);
        [id(0x0000007f), propput]
            HRESULT CachePersistenceActive([in] long pcachePersistenceActive);
        [id(0x0000007f), propget]
            HRESULT CachePersistenceActive([out, retval] long* pcachePersistenceActive);
        [id(0x0000008a), propput]
            HRESULT PersistCacheDirectory([in] BSTR rhs);
        [id(0x0000009c), propput]
            HRESULT brushSupportLevel([in] long pbrushSupportLevel);
        [id(0x0000009c), propget]
            HRESULT brushSupportLevel([out, retval] long* pbrushSupportLevel);
        [id(0x0000009d), propput]
            HRESULT minInputSendInterval([in] long pminInputSendInterval);
        [id(0x0000009d), propget]
            HRESULT minInputSendInterval([out, retval] long* pminInputSendInterval);
        [id(0x0000009e), propput]
            HRESULT InputEventsAtOnce([in] long pinputEventsAtOnce);
        [id(0x0000009e), propget]
            HRESULT InputEventsAtOnce([out, retval] long* pinputEventsAtOnce);
        [id(0x0000009f), propput]
            HRESULT maxEventCount([in] long pmaxEventCount);
        [id(0x0000009f), propget]
            HRESULT maxEventCount([out, retval] long* pmaxEventCount);
        [id(0x000000a0), propput]
            HRESULT keepAliveInterval([in] long pkeepAliveInterval);
        [id(0x000000a0), propget]
            HRESULT keepAliveInterval([out, retval] long* pkeepAliveInterval);
        [id(0x000000a3), propput]
            HRESULT shutdownTimeout([in] long pshutdownTimeout);
        [id(0x000000a3), propget]
            HRESULT shutdownTimeout([out, retval] long* pshutdownTimeout);
        [id(0x000000a4), propput]
            HRESULT overallConnectionTimeout([in] long poverallConnectionTimeout);
        [id(0x000000a4), propget]
            HRESULT overallConnectionTimeout([out, retval] long* poverallConnectionTimeout);
        [id(0x000000a5), propput]
            HRESULT singleConnectionTimeout([in] long psingleConnectionTimeout);
        [id(0x000000a5), propget]
            HRESULT singleConnectionTimeout([out, retval] long* psingleConnectionTimeout);
        [id(0x000000a6), propput]
            HRESULT KeyboardType([in] long pkeyboardType);
        [id(0x000000a6), propget]
            HRESULT KeyboardType([out, retval] long* pkeyboardType);
        [id(0x000000a7), propput]
            HRESULT KeyboardSubType([in] long pkeyboardSubType);
        [id(0x000000a7), propget]
            HRESULT KeyboardSubType([out, retval] long* pkeyboardSubType);
        [id(0x000000a8), propput]
            HRESULT KeyboardFunctionKey([in] long pkeyboardFunctionKey);
        [id(0x000000a8), propget]
            HRESULT KeyboardFunctionKey([out, retval] long* pkeyboardFunctionKey);
        [id(0x000000a9), propput]
            HRESULT WinceFixedPalette([in] long pwinceFixedPalette);
        [id(0x000000a9), propget]
            HRESULT WinceFixedPalette([out, retval] long* pwinceFixedPalette);
        [id(0x000000b2), propput]
            HRESULT ConnectToServerConsole([in] VARIANT_BOOL pConnectToConsole);
        [id(0x000000b2), propget]
            HRESULT ConnectToServerConsole([out, retval] VARIANT_BOOL* pConnectToConsole);
        [id(0x000000b6), propput]
            HRESULT BitmapPersistence([in] long pbitmapPersistence);
        [id(0x000000b6), propget]
            HRESULT BitmapPersistence([out, retval] long* pbitmapPersistence);
        [id(0x000000b7), propput]
            HRESULT MinutesToIdleTimeout([in] long pminutesToIdleTimeout);
        [id(0x000000b7), propget]
            HRESULT MinutesToIdleTimeout([out, retval] long* pminutesToIdleTimeout);
        [id(0x000000b8), propput]
            HRESULT SmartSizing([in] VARIANT_BOOL pfSmartSizing);
        [id(0x000000b8), propget]
            HRESULT SmartSizing([out, retval] VARIANT_BOOL* pfSmartSizing);
        [id(0x000000b9), propput]
            HRESULT RdpdrLocalPrintingDocName([in] BSTR pLocalPrintingDocName);
        [id(0x000000b9), propget]
            HRESULT RdpdrLocalPrintingDocName([out, retval] BSTR* pLocalPrintingDocName);
        [id(0x000000c9), propput]
            HRESULT RdpdrClipCleanTempDirString([in] BSTR clipCleanTempDirString);
        [id(0x000000c9), propget]
            HRESULT RdpdrClipCleanTempDirString([out, retval] BSTR* clipCleanTempDirString);
        [id(0x000000ca), propput]
            HRESULT RdpdrClipPasteInfoString([in] BSTR clipPasteInfoString);
        [id(0x000000ca), propget]
            HRESULT RdpdrClipPasteInfoString([out, retval] BSTR* clipPasteInfoString);
        [id(0x000000ba), propput]
            HRESULT ClearTextPassword([in] BSTR rhs);
        [id(0x000000bb), propput]
            HRESULT DisplayConnectionBar([in] VARIANT_BOOL pDisplayConnectionBar);
        [id(0x000000bb), propget]
            HRESULT DisplayConnectionBar([out, retval] VARIANT_BOOL* pDisplayConnectionBar);
        [id(0x000000bc), propput]
            HRESULT PinConnectionBar([in] VARIANT_BOOL pPinConnectionBar);
        [id(0x000000bc), propget]
            HRESULT PinConnectionBar([out, retval] VARIANT_BOOL* pPinConnectionBar);
        [id(0x000000bd), propput]
            HRESULT GrabFocusOnConnect([in] VARIANT_BOOL pfGrabFocusOnConnect);
        [id(0x000000bd), propget]
            HRESULT GrabFocusOnConnect([out, retval] VARIANT_BOOL* pfGrabFocusOnConnect);
        [id(0x000000be), propput]
            HRESULT LoadBalanceInfo([in] BSTR pLBInfo);
        [id(0x000000be), propget]
            HRESULT LoadBalanceInfo([out, retval] BSTR* pLBInfo);
        [id(0x000000bf), propput]
            HRESULT RedirectDrives([in] VARIANT_BOOL pRedirectDrives);
        [id(0x000000bf), propget]
            HRESULT RedirectDrives([out, retval] VARIANT_BOOL* pRedirectDrives);
        [id(0x000000c0), propput]
            HRESULT RedirectPrinters([in] VARIANT_BOOL pRedirectPrinters);
        [id(0x000000c0), propget]
            HRESULT RedirectPrinters([out, retval] VARIANT_BOOL* pRedirectPrinters);
        [id(0x000000c1), propput]
            HRESULT RedirectPorts([in] VARIANT_BOOL pRedirectPorts);
        [id(0x000000c1), propget]
            HRESULT RedirectPorts([out, retval] VARIANT_BOOL* pRedirectPorts);
        [id(0x000000c2), propput]
            HRESULT RedirectSmartCards([in] VARIANT_BOOL pRedirectSmartCards);
        [id(0x000000c2), propget]
            HRESULT RedirectSmartCards([out, retval] VARIANT_BOOL* pRedirectSmartCards);
        [id(0x000000c3), propput]
            HRESULT BitmapVirtualCache16BppSize([in] long pBitmapVirtualCache16BppSize);
        [id(0x000000c3), propget]
            HRESULT BitmapVirtualCache16BppSize([out, retval] long* pBitmapVirtualCache16BppSize);
        [id(0x000000c4), propput]
            HRESULT BitmapVirtualCache24BppSize([in] long pBitmapVirtualCache24BppSize);
        [id(0x000000c4), propget]
            HRESULT BitmapVirtualCache24BppSize([out, retval] long* pBitmapVirtualCache24BppSize);
        [id(0x000000c8), propput]
            HRESULT PerformanceFlags([in] long pDisableList);
        [id(0x000000c8), propget]
            HRESULT PerformanceFlags([out, retval] long* pDisableList);
        [id(0x000000cb), propput]
            HRESULT ConnectWithEndpoint([in] VARIANT* rhs);
        [id(0x000000cc), propput]
            HRESULT NotifyTSPublicKey([in] VARIANT_BOOL pfNotify);
        [id(0x000000cc), propget]
            HRESULT NotifyTSPublicKey([out, retval] VARIANT_BOOL* pfNotify);
    };

    [
        odl,
            uuid(605BEFCF-39C1-45CC-A811-068FB7BE346D),
            dual,
            oleautomation
    ]
        interface IMsRdpClientSecuredSettings : IMsTscSecuredSettings {
        [id(0x00000004), propput]
            HRESULT KeyboardHookMode([in] long pkeyboardHookMode);
        [id(0x00000004), propget]
            HRESULT KeyboardHookMode([out, retval] long* pkeyboardHookMode);
        [id(0x00000005), propput]
            HRESULT AudioRedirectionMode([in] long pAudioRedirectionMode);
        [id(0x00000005), propget]
            HRESULT AudioRedirectionMode([out, retval] long* pAudioRedirectionMode);
    };

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0000_0001 ExtendedDisconnectReasonCode;

    typedef enum {
        exDiscReasonNoInfo = 0,
        exDiscReasonAPIInitiatedDisconnect = 1,
        exDiscReasonAPIInitiatedLogoff = 2,
        exDiscReasonServerIdleTimeout = 3,
        exDiscReasonServerLogonTimeout = 4,
        exDiscReasonReplacedByOtherConnection = 5,
        exDiscReasonOutOfMemory = 6,
        exDiscReasonServerDeniedConnection = 7,
        exDiscReasonServerDeniedConnectionFips = 8,
        exDiscReasonServerInsufficientPrivileges = 9,
        exDiscReasonServerFreshCredsRequired = 10,
        exDiscReasonRpcInitiatedDisconnectByUser = 11,
        exDiscReasonLogoffByUser = 12,
        exDiscReasonShutdown = 25,
        exDiscReasonReboot = 26,
        exDiscReasonSessionLockedDueToAAD = 28,
        exDiscReasonLicenseInternal = 256,
        exDiscReasonLicenseNoLicenseServer = 257,
        exDiscReasonLicenseNoLicense = 258,
        exDiscReasonLicenseErrClientMsg = 259,
        exDiscReasonLicenseHwidDoesntMatchLicense = 260,
        exDiscReasonLicenseErrClientLicense = 261,
        exDiscReasonLicenseCantFinishProtocol = 262,
        exDiscReasonLicenseClientEndedProtocol = 263,
        exDiscReasonLicenseErrClientEncryption = 264,
        exDiscReasonLicenseCantUpgradeLicense = 265,
        exDiscReasonLicenseNoRemoteConnections = 266,
        exDiscReasonLicenseCreatingLicStoreAccDenied = 267,
        exDiscReasonRdpEncInvalidCredentials = 768,
        exDiscReasonProtocolRangeStart = 4096,
        exDiscReasonProtocolRangeEnd = 32767
    } __MIDL___MIDL_itf_mstsax_0000_0000_0001;

    typedef [public]
        __MIDL_IMsRdpClient_0001 ControlCloseStatus;

    typedef enum {
        controlCloseCanProceed = 0,
        controlCloseWaitForEvents = 1
    } __MIDL_IMsRdpClient_0001;

    [
        odl,
            uuid(C1E6743A-41C1-4A74-832A-0DD06C1C7A0E)
    ]
        interface IMsTscNonScriptable : IUnknown {
        [propput]
            HRESULT _stdcall ClearTextPassword([in] BSTR rhs);
        [propput]
            HRESULT _stdcall PortablePassword([in] BSTR pPortablePass);
        [propget]
            HRESULT _stdcall PortablePassword([out, retval] BSTR* pPortablePass);
        [propput]
            HRESULT _stdcall PortableSalt([in] BSTR pPortableSalt);
        [propget]
            HRESULT _stdcall PortableSalt([out, retval] BSTR* pPortableSalt);
        [propput]
            HRESULT _stdcall BinaryPassword([in] BSTR pBinaryPassword);
        [propget]
            HRESULT _stdcall BinaryPassword([out, retval] BSTR* pBinaryPassword);
        [propput]
            HRESULT _stdcall BinarySalt([in] BSTR pSalt);
        [propget]
            HRESULT _stdcall BinarySalt([out, retval] BSTR* pSalt);
        HRESULT _stdcall ResetPassword();
    };

    [
        odl,
            uuid(2F079C4C-87B2-4AFD-97AB-20CDB43038AE)
    ]
        interface IMsRdpClientNonScriptable : IMsTscNonScriptable {
        HRESULT _stdcall NotifyRedirectDeviceChange(
            [in] UINT_PTR wParam,
            [in] LONG_PTR lParam);
        HRESULT _stdcall SendKeys(
            [in] long numKeys,
            [in] VARIANT_BOOL* pbArrayKeyUp,
            [in] long* plKeyData);
    };

    typedef [public,
        custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)
    ]
        unsigned long UINT_PTR;

    typedef [public,
        custom(F914481D-9C62-4B43-9340-E9B2E6252E5F, 1)
    ]
        long LONG_PTR;

    [
        uuid(1FB464C8-09BB-4017-A2F5-EB742F04392F),
            helpstring("Microsoft Terminal Services Client Control (redistributable) - version 1"),
            noncreatable
    ]
        coclass MsTscAx {
        interface IMsRdpClient;
        [default] interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(7CACBD7B-0D99-468F-AC33-22E495C0AFE5),
            helpstring("Microsoft RDP Client Control - version 2"),
            control
    ]
        coclass MsRdpClientNotSafeForScripting {
        [default] interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(791FA017-2DE3-492E-ACC5-53C67A2B94D0),
            helpstring("Microsoft RDP Client Control (redistributable) - version 2"),
            noncreatable
    ]
        coclass MsRdpClient {
        [default] interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(3523C2FB-4031-44E4-9A3B-F1E94986EE7F),
            helpstring("Microsoft RDP Client Control - version 3"),
            control
    ]
        coclass MsRdpClient2NotSafeForScripting {
        [default] interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        odl,
            uuid(E7E17DC4-3B71-4BA7-A8E6-281FFADCA28F),
            dual,
            oleautomation
    ]
        interface IMsRdpClient2 : IMsRdpClient {
        [id(0x000000c8), propget]
            HRESULT AdvancedSettings3([out, retval] IMsRdpClientAdvancedSettings2** ppAdvSettings);
        [id(0x000000c9), propput]
            HRESULT ConnectedStatusText([in] BSTR pConnectedStatusText);
        [id(0x000000c9), propget]
            HRESULT ConnectedStatusText([out, retval] BSTR* pConnectedStatusText);
    };

    [
        odl,
            uuid(9AC42117-2B76-4320-AA44-0E616AB8437B),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings2 : IMsRdpClientAdvancedSettings {
        [id(0x000000cd), propget]
            HRESULT CanAutoReconnect([out, retval] VARIANT_BOOL* pfCanAutoReconnect);
        [id(0x000000ce), propput]
            HRESULT EnableAutoReconnect([in] VARIANT_BOOL pfEnableAutoReconnect);
        [id(0x000000ce), propget]
            HRESULT EnableAutoReconnect([out, retval] VARIANT_BOOL* pfEnableAutoReconnect);
        [id(0x000000cf), propput]
            HRESULT MaxReconnectAttempts([in] long pMaxReconnectAttempts);
        [id(0x000000cf), propget]
            HRESULT MaxReconnectAttempts([out, retval] long* pMaxReconnectAttempts);
    };

    [
        uuid(9059F30F-4EB1-4BD2-9FDC-36F43A218F4A),
            helpstring("Microsoft RDP Client Control (redistributable) - version 3"),
            control
    ]
        coclass MsRdpClient2 {
        [default] interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(971127BB-259F-48C2-BD75-5F97A3331551),
            helpstring("Microsoft RDP Client Control (redistributable) - version 3a"),
            control
    ]
        coclass MsRdpClient2a {
        [default] interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(ACE575FD-1FCF-4074-9401-EBAB990FA9DE),
            helpstring("Microsoft RDP Client Control - version 4"),
            control
    ]
        coclass MsRdpClient3NotSafeForScripting {
        [default] interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        odl,
            uuid(91B7CBC5-A72E-4FA0-9300-D647D7E897FF),
            dual,
            oleautomation
    ]
        interface IMsRdpClient3 : IMsRdpClient2 {
        [id(0x0000012c), propget]
            HRESULT AdvancedSettings4([out, retval] IMsRdpClientAdvancedSettings3** ppAdvSettings);
    };

    [
        odl,
            uuid(19CD856B-C542-4C53-ACEE-F127E3BE1A59),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings3 : IMsRdpClientAdvancedSettings2 {
        [id(0x000000d2), propput]
            HRESULT ConnectionBarShowMinimizeButton([in] VARIANT_BOOL pfShowMinimize);
        [id(0x000000d2), propget]
            HRESULT ConnectionBarShowMinimizeButton([out, retval] VARIANT_BOOL* pfShowMinimize);
        [id(0x000000d3), propput]
            HRESULT ConnectionBarShowRestoreButton([in] VARIANT_BOOL pfShowRestore);
        [id(0x000000d3), propget]
            HRESULT ConnectionBarShowRestoreButton([out, retval] VARIANT_BOOL* pfShowRestore);
    };

    [
        uuid(7584C670-2274-4EFB-B00B-D6AABA6D3850),
            helpstring("Microsoft RDP Client Control (redistributable) - version 4"),
            control
    ]
        coclass MsRdpClient3 {
        [default] interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(6A6F4B83-45C5-4CA9-BDD9-0D81C12295E4),
            helpstring("Microsoft RDP Client Control (redistributable) - version 4a"),
            control
    ]
        coclass MsRdpClient3a {
        [default] interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
    };

    [
        uuid(6AE29350-321B-42BE-BBE5-12FB5270C0DE),
            helpstring("Microsoft RDP Client Control - version 5"),
            control
    ]
        coclass MsRdpClient4NotSafeForScripting {
        [default] interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
    };

    [
        odl,
            uuid(095E0738-D97D-488B-B9F6-DD0E8D66C0DE),
            dual,
            oleautomation
    ]
        interface IMsRdpClient4 : IMsRdpClient3 {
        [id(0x00000190), propget]
            HRESULT AdvancedSettings5([out, retval] IMsRdpClientAdvancedSettings4** ppAdvSettings);
    };

    [
        odl,
            uuid(FBA7F64E-7345-4405-AE50-FA4A763DC0DE),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings4 : IMsRdpClientAdvancedSettings3 {
        [id(0x000000d4), propput]
            HRESULT AuthenticationLevel([in] unsigned int puiAuthLevel);
        [id(0x000000d4), propget]
            HRESULT AuthenticationLevel([out, retval] unsigned int* puiAuthLevel);
    };

    [
        odl,
            uuid(17A5E535-4072-4FA4-AF32-C8D0D47345E9)
    ]
        interface IMsRdpClientNonScriptable2 : IMsRdpClientNonScriptable {
        [propput]
            HRESULT _stdcall UIParentWindowHandle([in] wireHWND phwndUIParentWindowHandle);
        [propget]
            HRESULT _stdcall UIParentWindowHandle([out, retval] wireHWND* phwndUIParentWindowHandle);
    };

    [
        uuid(4EDCB26C-D24C-4E72-AF07-B576699AC0DE),
            helpstring("Microsoft RDP Client Control (redistributable) - version 5"),
            control
    ]
        coclass MsRdpClient4 {
        [default] interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
    };

    [
        uuid(54CE37E0-9834-41AE-9896-4DAB69DC022B),
            helpstring("Microsoft RDP Client Control (redistributable) - version 5a"),
            control
    ]
        coclass MsRdpClient4a {
        [default] interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
    };

    [
        uuid(4EB2F086-C818-447E-B32C-C51CE2B30D31),
            helpstring("Microsoft RDP Client Control - version 6"),
            control
    ]
        coclass MsRdpClient5NotSafeForScripting {
        [default] interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
    };

    [
        odl,
            uuid(4EB5335B-6429-477D-B922-E06A28ECD8BF),
            dual,
            oleautomation
    ]
        interface IMsRdpClient5 : IMsRdpClient4 {
        [id(0x000001f4), propget]
            HRESULT TransportSettings([out, retval] IMsRdpClientTransportSettings** ppXportSet);
        [id(0x000001f6), propget]
            HRESULT AdvancedSettings6([out, retval] IMsRdpClientAdvancedSettings5** ppAdvSettings);
        [id(0x000001f7)]
            HRESULT GetErrorDescription(
                [in] unsigned int disconnectReason,
                [in] unsigned int ExtendedDisconnectReason,
                [out, retval] BSTR* pBstrErrorMsg);
        [id(0x000001f8), propget]
            HRESULT RemoteProgram([out, retval] ITSRemoteProgram** ppRemoteProgram);
        [id(0x000001f9), propget]
            HRESULT MsRdpClientShell([out, retval] IMsRdpClientShell** ppLauncher);
    };

    [
        odl,
            uuid(720298C0-A099-46F5-9F82-96921BAE4701),
            dual,
            oleautomation
    ]
        interface IMsRdpClientTransportSettings : IDispatch {
        [id(0x000000d2), propput]
            HRESULT GatewayHostname([in] BSTR pProxyHostname);
        [id(0x000000d2), propget]
            HRESULT GatewayHostname([out, retval] BSTR* pProxyHostname);
        [id(0x000000d3), propput]
            HRESULT GatewayUsageMethod([in] unsigned long pulProxyUsageMethod);
        [id(0x000000d3), propget]
            HRESULT GatewayUsageMethod([out, retval] unsigned long* pulProxyUsageMethod);
        [id(0x000000d4), propput]
            HRESULT GatewayProfileUsageMethod([in] unsigned long pulProxyProfileUsageMethod);
        [id(0x000000d4), propget]
            HRESULT GatewayProfileUsageMethod([out, retval] unsigned long* pulProxyProfileUsageMethod);
        [id(0x000000d5), propput]
            HRESULT GatewayCredsSource([in] unsigned long pulProxyCredsSource);
        [id(0x000000d5), propget]
            HRESULT GatewayCredsSource([out, retval] unsigned long* pulProxyCredsSource);
        [id(0x000000d8), propput]
            HRESULT GatewayUserSelectedCredsSource([in] unsigned long pulProxyCredsSource);
        [id(0x000000d8), propget]
            HRESULT GatewayUserSelectedCredsSource([out, retval] unsigned long* pulProxyCredsSource);
        [id(0x000000d6), propget]
            HRESULT GatewayIsSupported([out, retval] long* pfProxyIsSupported);
        [id(0x000000d7), propget]
            HRESULT GatewayDefaultUsageMethod([out, retval] unsigned long* pulProxyDefaultUsageMethod);
    };

    [
        odl,
            uuid(FBA7F64E-6783-4405-DA45-FA4A763DABD0),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings5 : IMsRdpClientAdvancedSettings4 {
        [id(0x000000d5), propput]
            HRESULT RedirectClipboard([in] VARIANT_BOOL pfRedirectClipboard);
        [id(0x000000d5), propget]
            HRESULT RedirectClipboard([out, retval] VARIANT_BOOL* pfRedirectClipboard);
        [id(0x000000d7), propput]
            HRESULT AudioRedirectionMode([in] unsigned int puiAudioRedirectionMode);
        [id(0x000000d7), propget]
            HRESULT AudioRedirectionMode([out, retval] unsigned int* puiAudioRedirectionMode);
        [id(0x000000d8), propput]
            HRESULT ConnectionBarShowPinButton([in] VARIANT_BOOL pfShowPin);
        [id(0x000000d8), propget]
            HRESULT ConnectionBarShowPinButton([out, retval] VARIANT_BOOL* pfShowPin);
        [id(0x000000d9), propput]
            HRESULT PublicMode([in] VARIANT_BOOL pfPublicMode);
        [id(0x000000d9), propget]
            HRESULT PublicMode([out, retval] VARIANT_BOOL* pfPublicMode);
        [id(0x000000da), propput]
            HRESULT RedirectDevices([in] VARIANT_BOOL pfRedirectPnPDevices);
        [id(0x000000da), propget]
            HRESULT RedirectDevices([out, retval] VARIANT_BOOL* pfRedirectPnPDevices);
        [id(0x000000db), propput]
            HRESULT RedirectPOSDevices([in] VARIANT_BOOL pfRedirectPOSDevices);
        [id(0x000000db), propget]
            HRESULT RedirectPOSDevices([out, retval] VARIANT_BOOL* pfRedirectPOSDevices);
        [id(0x000000dc), propput]
            HRESULT BitmapVirtualCache32BppSize([in] long pBitmapVirtualCache32BppSize);
        [id(0x000000dc), propget]
            HRESULT BitmapVirtualCache32BppSize([out, retval] long* pBitmapVirtualCache32BppSize);
    };

    [
        odl,
            uuid(FDD029F9-467A-4C49-8529-64B521DBD1B4),
            hidden,
            dual,
            oleautomation
    ]
        interface ITSRemoteProgram : IDispatch {
        [id(0x000000c8), propput]
            HRESULT RemoteProgramMode([in] VARIANT_BOOL pvboolRemoteProgramMode);
        [id(0x000000c8), propget]
            HRESULT RemoteProgramMode([out, retval] VARIANT_BOOL* pvboolRemoteProgramMode);
        [id(0x000000c9)]
            HRESULT ServerStartProgram(
                [in] BSTR bstrExecutablePath,
                [in] BSTR bstrFilePath,
                [in] BSTR bstrWorkingDirectory,
                [in] VARIANT_BOOL vbExpandEnvVarInWorkingDirectoryOnServer,
                [in] BSTR bstrArguments,
                [in] VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer);
    };

    [
        odl,
            uuid(D012AE6D-C19A-4BFE-B367-201F8911F134),
            dual,
            oleautomation
    ]
        interface IMsRdpClientShell : IDispatch {
        [id(0x000000c9)]
            HRESULT Launch();
        [id(0x000000ca), propput]
            HRESULT RdpFileContents([in] BSTR pszRdpFile);
        [id(0x000000ca), propget]
            HRESULT RdpFileContents([out, retval] BSTR* pszRdpFile);
        [id(0x000000cb)]
            HRESULT SetRdpProperty(
                [in] BSTR szProperty,
                [in] VARIANT Value);
        [id(0x000000cc)]
            HRESULT GetRdpProperty(
                [in] BSTR szProperty,
                [out, retval] VARIANT* pValue);
        [id(0x000000cd), propget]
            HRESULT IsRemoteProgramClientInstalled([out, retval] VARIANT_BOOL* pbClientInstalled);
        [id(0x000000d3), propput]
            HRESULT PublicMode([in] VARIANT_BOOL pfPublicMode);
        [id(0x000000d3), propget]
            HRESULT PublicMode([out, retval] VARIANT_BOOL* pfPublicMode);
        [id(0x000000d4)]
            HRESULT ShowTrustedSitesManagementDialog();
    };

    [
        odl,
            uuid(B3378D90-0728-45C7-8ED7-B6159FB92219)
    ]
        interface IMsRdpClientNonScriptable3 : IMsRdpClientNonScriptable2 {
        [propput]
            HRESULT _stdcall ShowRedirectionWarningDialog([in] VARIANT_BOOL pfShowRdrDlg);
        [propget]
            HRESULT _stdcall ShowRedirectionWarningDialog([out, retval] VARIANT_BOOL* pfShowRdrDlg);
        [propput]
            HRESULT _stdcall PromptForCredentials([in] VARIANT_BOOL pfPrompt);
        [propget]
            HRESULT _stdcall PromptForCredentials([out, retval] VARIANT_BOOL* pfPrompt);
        [propput]
            HRESULT _stdcall NegotiateSecurityLayer([in] VARIANT_BOOL pfNegotiate);
        [propget]
            HRESULT _stdcall NegotiateSecurityLayer([out, retval] VARIANT_BOOL* pfNegotiate);
        [propput]
            HRESULT _stdcall EnableCredSspSupport([in] VARIANT_BOOL pfEnableSupport);
        [propget]
            HRESULT _stdcall EnableCredSspSupport([out, retval] VARIANT_BOOL* pfEnableSupport);
        [propput]
            HRESULT _stdcall RedirectDynamicDrives([in] VARIANT_BOOL pfRedirectDynamicDrives);
        [propget]
            HRESULT _stdcall RedirectDynamicDrives([out, retval] VARIANT_BOOL* pfRedirectDynamicDrives);
        [propput]
            HRESULT _stdcall RedirectDynamicDevices([in] VARIANT_BOOL pfRedirectDynamicDevices);
        [propget]
            HRESULT _stdcall RedirectDynamicDevices([out, retval] VARIANT_BOOL* pfRedirectDynamicDevices);
        [propget]
            HRESULT _stdcall DeviceCollection([out, retval] IMsRdpDeviceCollection** ppDeviceCollection);
        [propget]
            HRESULT _stdcall DriveCollection([out, retval] IMsRdpDriveCollection** ppDeviceCollection);
        [propput]
            HRESULT _stdcall WarnAboutSendingCredentials([in] VARIANT_BOOL pfWarn);
        [propget]
            HRESULT _stdcall WarnAboutSendingCredentials([out, retval] VARIANT_BOOL* pfWarn);
        [propput]
            HRESULT _stdcall WarnAboutClipboardRedirection([in] VARIANT_BOOL pfWarn);
        [propget]
            HRESULT _stdcall WarnAboutClipboardRedirection([out, retval] VARIANT_BOOL* pfWarn);
        [propput]
            HRESULT _stdcall ConnectionBarText([in] BSTR pConnectionBarText);
        [propget]
            HRESULT _stdcall ConnectionBarText([out, retval] BSTR* pConnectionBarText);
    };

    [
        odl,
            uuid(56540617-D281-488C-8738-6A8FDF64A118)
    ]
        interface IMsRdpDeviceCollection : IUnknown {
        HRESULT _stdcall RescanDevices([in] VARIANT_BOOL vboolDynRedir);
        [propget]
            HRESULT _stdcall DeviceByIndex(
                [in] unsigned long index,
                [out, retval] IMsRdpDevice** ppDevice);
        [propget]
            HRESULT _stdcall DeviceById(
                [in] BSTR devInstanceId,
                [out, retval] IMsRdpDevice** ppDevice);
        [propget]
            HRESULT _stdcall DeviceCount([out, retval] unsigned long* pDeviceCount);
    };

    [
        odl,
            uuid(60C3B9C8-9E92-4F5E-A3E7-604A912093EA)
    ]
        interface IMsRdpDevice : IUnknown {
        [propget]
            HRESULT _stdcall DeviceInstanceId([out, retval] BSTR* pDevInstanceId);
        [propget]
            HRESULT _stdcall FriendlyName([out, retval] BSTR* pFriendlyName);
        [propget]
            HRESULT _stdcall DeviceDescription([out, retval] BSTR* pDeviceDescription);
        [propput]
            HRESULT _stdcall RedirectionState([in] VARIANT_BOOL pvboolRedirState);
        [propget]
            HRESULT _stdcall RedirectionState([out, retval] VARIANT_BOOL* pvboolRedirState);
    };

    [
        odl,
            uuid(7FF17599-DA2C-4677-AD35-F60C04FE1585)
    ]
        interface IMsRdpDriveCollection : IUnknown {
        HRESULT _stdcall RescanDrives(VARIANT_BOOL vboolDynRedir);
        [propget]
            HRESULT _stdcall DriveByIndex(
                [in] unsigned long index,
                [out, retval] IMsRdpDrive** ppDevice);
        [propget]
            HRESULT _stdcall DriveCount([out, retval] unsigned long* pDriveCount);
    };

    [
        odl,
            uuid(D28B5458-F694-47A8-8E61-40356A767E46)
    ]
        interface IMsRdpDrive : IUnknown {
        [propget]
            HRESULT _stdcall Name([out, retval] BSTR* pName);
        [propput]
            HRESULT _stdcall RedirectionState([in] VARIANT_BOOL pvboolRedirState);
        [propget]
            HRESULT _stdcall RedirectionState([out, retval] VARIANT_BOOL* pvboolRedirState);
    };

    [
        uuid(4EB89FF4-7F78-4A0F-8B8D-2BF02E94E4B2),
            helpstring("Microsoft RDP Client Control (redistributable) - version 6"),
            control
    ]
        coclass MsRdpClient5 {
        [default] interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
    };

    [
        uuid(D2EA46A7-C2BF-426B-AF24-E19C44456399),
            helpstring("Microsoft RDP Client Control - version 7"),
            control
    ]
        coclass MsRdpClient6NotSafeForScripting {
        [default] interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
    };

    [
        odl,
            uuid(D43B7D80-8517-4B6D-9EAC-96AD6800D7F2),
            dual,
            oleautomation
    ]
        interface IMsRdpClient6 : IMsRdpClient5 {
        [id(0x000001fb), propget]
            HRESULT AdvancedSettings7([out, retval] IMsRdpClientAdvancedSettings6** ppAdvSettings);
        [id(0x000001fa), propget]
            HRESULT TransportSettings2([out, retval] IMsRdpClientTransportSettings2** ppXportSet2);
    };

    [
        odl,
            uuid(222C4B5D-45D9-4DF0-A7C6-60CF9089D285),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings6 : IMsRdpClientAdvancedSettings5 {
        [id(0x000000dd), propput]
            HRESULT RelativeMouseMode([in] VARIANT_BOOL pfRelativeMouseMode);
        [id(0x000000dd), propget]
            HRESULT RelativeMouseMode([out, retval] VARIANT_BOOL* pfRelativeMouseMode);
        [id(0x000000de), propget]
            HRESULT AuthenticationServiceClass([out, retval] BSTR* pbstrAuthServiceClass);
        [id(0x000000de), propput]
            HRESULT AuthenticationServiceClass([in] BSTR pbstrAuthServiceClass);
        [id(0x000000df), propget]
            HRESULT PCB([out, retval] BSTR* bstrPCB);
        [id(0x000000df), propput]
            HRESULT PCB([in] BSTR bstrPCB);
        [id(0x000000e0), propput]
            HRESULT HotKeyFocusReleaseLeft([in] long HotKeyFocusReleaseLeft);
        [id(0x000000e0), propget]
            HRESULT HotKeyFocusReleaseLeft([out, retval] long* HotKeyFocusReleaseLeft);
        [id(0x000000e1), propput]
            HRESULT HotKeyFocusReleaseRight([in] long HotKeyFocusReleaseRight);
        [id(0x000000e1), propget]
            HRESULT HotKeyFocusReleaseRight([out, retval] long* HotKeyFocusReleaseRight);
        [id(0x00000011), propput]
            HRESULT EnableCredSspSupport([in] VARIANT_BOOL pfEnableSupport);
        [id(0x00000011), propget]
            HRESULT EnableCredSspSupport([out, retval] VARIANT_BOOL* pfEnableSupport);
        [id(0x000000e2), propget]
            HRESULT AuthenticationType([out, retval] unsigned int* puiAuthType);
        [id(0x000000e3), propput]
            HRESULT ConnectToAdministerServer([in] VARIANT_BOOL pConnectToAdministerServer);
        [id(0x000000e3), propget]
            HRESULT ConnectToAdministerServer([out, retval] VARIANT_BOOL* pConnectToAdministerServer);
    };

    [
        odl,
            uuid(67341688-D606-4C73-A5D2-2E0489009319),
            dual,
            oleautomation
    ]
        interface IMsRdpClientTransportSettings2 : IMsRdpClientTransportSettings {
        [id(0x000000de), propput]
            HRESULT GatewayCredSharing([in] unsigned long pulProxyCredSharing);
        [id(0x000000de), propget]
            HRESULT GatewayCredSharing([out, retval] unsigned long* pulProxyCredSharing);
        [id(0x000000d9), propput]
            HRESULT GatewayPreAuthRequirement([in] unsigned long pulProxyPreAuthRequirement);
        [id(0x000000d9), propget]
            HRESULT GatewayPreAuthRequirement([out, retval] unsigned long* pulProxyPreAuthRequirement);
        [id(0x000000da), propput]
            HRESULT GatewayPreAuthServerAddr([in] BSTR pbstrProxyPreAuthServerAddr);
        [id(0x000000da), propget]
            HRESULT GatewayPreAuthServerAddr([out, retval] BSTR* pbstrProxyPreAuthServerAddr);
        [id(0x000000db), propput]
            HRESULT GatewaySupportUrl([in] BSTR pbstrProxySupportUrl);
        [id(0x000000db), propget]
            HRESULT GatewaySupportUrl([out, retval] BSTR* pbstrProxySupportUrl);
        [id(0x000000dc), propput]
            HRESULT GatewayEncryptedOtpCookie([in] BSTR pbstrEncryptedOtpCookie);
        [id(0x000000dc), propget]
            HRESULT GatewayEncryptedOtpCookie([out, retval] BSTR* pbstrEncryptedOtpCookie);
        [id(0x000000dd), propput]
            HRESULT GatewayEncryptedOtpCookieSize([in] unsigned long pulEncryptedOtpCookieSize);
        [id(0x000000dd), propget]
            HRESULT GatewayEncryptedOtpCookieSize([out, retval] unsigned long* pulEncryptedOtpCookieSize);
        [id(0x000000df), propput]
            HRESULT GatewayUsername([in] BSTR pProxyUsername);
        [id(0x000000df), propget]
            HRESULT GatewayUsername([out, retval] BSTR* pProxyUsername);
        [id(0x000000e0), propput]
            HRESULT GatewayDomain([in] BSTR pProxyDomain);
        [id(0x000000e0), propget]
            HRESULT GatewayDomain([out, retval] BSTR* pProxyDomain);
        [id(0x000000e1), propput]
            HRESULT GatewayPassword([in] BSTR rhs);
    };

    [
        odl,
            uuid(F50FA8AA-1C7D-4F59-B15C-A90CACAE1FCB)
    ]
        interface IMsRdpClientNonScriptable4 : IMsRdpClientNonScriptable3 {
        [propput]
            HRESULT _stdcall RedirectionWarningType([in] RedirectionWarningType pWrnType);
        [propget]
            HRESULT _stdcall RedirectionWarningType([out, retval] RedirectionWarningType* pWrnType);
        [propput]
            HRESULT _stdcall MarkRdpSettingsSecure([in] VARIANT_BOOL pfRdpSecure);
        [propget]
            HRESULT _stdcall MarkRdpSettingsSecure([out, retval] VARIANT_BOOL* pfRdpSecure);
        [propput]
            HRESULT _stdcall PublisherCertificateChain([in] VARIANT* pVarCert);
        [propget]
            HRESULT _stdcall PublisherCertificateChain([out, retval] VARIANT* pVarCert);
        [propput]
            HRESULT _stdcall WarnAboutPrinterRedirection([in] VARIANT_BOOL pfWarn);
        [propget]
            HRESULT _stdcall WarnAboutPrinterRedirection([out, retval] VARIANT_BOOL* pfWarn);
        [propput]
            HRESULT _stdcall AllowCredentialSaving([in] VARIANT_BOOL pfAllowSave);
        [propget]
            HRESULT _stdcall AllowCredentialSaving([out, retval] VARIANT_BOOL* pfAllowSave);
        [propput]
            HRESULT _stdcall PromptForCredsOnClient([in] VARIANT_BOOL pfPromptForCredsOnClient);
        [propget]
            HRESULT _stdcall PromptForCredsOnClient([out, retval] VARIANT_BOOL* pfPromptForCredsOnClient);
        [propput]
            HRESULT _stdcall LaunchedViaClientShellInterface([in] VARIANT_BOOL pfLaunchedViaClientShellInterface);
        [propget]
            HRESULT _stdcall LaunchedViaClientShellInterface([out, retval] VARIANT_BOOL* pfLaunchedViaClientShellInterface);
        [propput]
            HRESULT _stdcall TrustedZoneSite([in] VARIANT_BOOL pfIsTrustedZone);
        [propget]
            HRESULT _stdcall TrustedZoneSite([out, retval] VARIANT_BOOL* pfIsTrustedZone);
    };

    typedef [public]
        __MIDL_IMsRdpClientNonScriptable4_0001 RedirectionWarningType;

    typedef enum {
        RedirectionWarningTypeDefault = 0,
        RedirectionWarningTypeUnsigned = 1,
        RedirectionWarningTypeUnknown = 2,
        RedirectionWarningTypeUser = 3,
        RedirectionWarningTypeThirdPartySigned = 4,
        RedirectionWarningTypeTrusted = 5,
        RedirectionWarningTypeMax = 5
    } __MIDL_IMsRdpClientNonScriptable4_0001;

    [
        uuid(7390F3D8-0439-4C05-91E3-CF5CB290C3D0),
            helpstring("Microsoft RDP Client Control (redistributable) - version 7"),
            control
    ]
        coclass MsRdpClient6 {
        [default] interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
    };

    [
        uuid(54D38BF7-B1EF-4479-9674-1BD6EA465258),
            helpstring("Microsoft RDP Client Control - version 8"),
            control
    ]
        coclass MsRdpClient7NotSafeForScripting {
        [default] interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(B2A5B5CE-3461-444A-91D4-ADD26D070638),
            dual,
            oleautomation
    ]
        interface IMsRdpClient7 : IMsRdpClient6 {
        [id(0x00000258), propget]
            HRESULT AdvancedSettings8([out, retval] IMsRdpClientAdvancedSettings7** ppAdvSettings);
        [id(0x00000259), propget]
            HRESULT TransportSettings3([out, retval] IMsRdpClientTransportSettings3** ppXportSet3);
        [id(0x0000025a)]
            HRESULT GetStatusText(
                [in] unsigned int statusCode,
                [out, retval] BSTR* pBstrStatusText);
        [id(0x0000025b), propget]
            HRESULT SecuredSettings3([out, retval] IMsRdpClientSecuredSettings2** ppSecuredSettings);
        [id(0x0000025c), propget]
            HRESULT RemoteProgram2([out, retval] ITSRemoteProgram2** ppRemoteProgram);
    };

    [
        odl,
            uuid(26036036-4010-4578-8091-0DB9A1EDF9C3),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings7 : IMsRdpClientAdvancedSettings6 {
        [id(0x000000e4), propput]
            HRESULT AudioCaptureRedirectionMode([in] VARIANT_BOOL pfRedir);
        [id(0x000000e4), propget]
            HRESULT AudioCaptureRedirectionMode([out, retval] VARIANT_BOOL* pfRedir);
        [id(0x000000e5), propput]
            HRESULT VideoPlaybackMode([in] unsigned int pVideoPlaybackMode);
        [id(0x000000e5), propget]
            HRESULT VideoPlaybackMode([out, retval] unsigned int* pVideoPlaybackMode);
        [id(0x000000e6), propput]
            HRESULT EnableSuperPan([in] VARIANT_BOOL pfEnableSuperPan);
        [id(0x000000e6), propget]
            HRESULT EnableSuperPan([out, retval] VARIANT_BOOL* pfEnableSuperPan);
        [id(0x000000e7), propput]
            HRESULT SuperPanAccelerationFactor([in] unsigned long puAccelFactor);
        [id(0x000000e7), propget]
            HRESULT SuperPanAccelerationFactor([out, retval] unsigned long* puAccelFactor);
        [id(0x000000e8), propput]
            HRESULT NegotiateSecurityLayer([in] VARIANT_BOOL pfNegotiate);
        [id(0x000000e8), propget]
            HRESULT NegotiateSecurityLayer([out, retval] VARIANT_BOOL* pfNegotiate);
        [id(0x000000e9), propput]
            HRESULT AudioQualityMode([in] unsigned int pAudioQualityMode);
        [id(0x000000e9), propget]
            HRESULT AudioQualityMode([out, retval] unsigned int* pAudioQualityMode);
        [id(0x000000ea), propput]
            HRESULT RedirectDirectX([in] VARIANT_BOOL pfRedirectDirectX);
        [id(0x000000ea), propget]
            HRESULT RedirectDirectX([out, retval] VARIANT_BOOL* pfRedirectDirectX);
        [id(0x000000eb), propput]
            HRESULT NetworkConnectionType([in] unsigned int pConnectionType);
        [id(0x000000eb), propget]
            HRESULT NetworkConnectionType([out, retval] unsigned int* pConnectionType);
    };

    [
        odl,
            uuid(3D5B21AC-748D-41DE-8F30-E15169586BD4),
            dual,
            oleautomation
    ]
        interface IMsRdpClientTransportSettings3 : IMsRdpClientTransportSettings2 {
        [id(0x000000e2), propput]
            HRESULT GatewayCredSourceCookie([in] unsigned long pulProxyCredSourceCookie);
        [id(0x000000e2), propget]
            HRESULT GatewayCredSourceCookie([out, retval] unsigned long* pulProxyCredSourceCookie);
        [id(0x000000e3), propput]
            HRESULT GatewayAuthCookieServerAddr([in] BSTR pbstrProxyAuthCookieServerAddr);
        [id(0x000000e3), propget]
            HRESULT GatewayAuthCookieServerAddr([out, retval] BSTR* pbstrProxyAuthCookieServerAddr);
        [id(0x000000e4), propput]
            HRESULT GatewayEncryptedAuthCookie([in] BSTR pbstrEncryptedAuthCookie);
        [id(0x000000e4), propget]
            HRESULT GatewayEncryptedAuthCookie([out, retval] BSTR* pbstrEncryptedAuthCookie);
        [id(0x000000e5), propput]
            HRESULT GatewayEncryptedAuthCookieSize([in] unsigned long pulEncryptedAuthCookieSize);
        [id(0x000000e5), propget]
            HRESULT GatewayEncryptedAuthCookieSize([out, retval] unsigned long* pulEncryptedAuthCookieSize);
        [id(0x000000e6), propput]
            HRESULT GatewayAuthLoginPage([in] BSTR pbstrProxyAuthLoginPage);
        [id(0x000000e6), propget]
            HRESULT GatewayAuthLoginPage([out, retval] BSTR* pbstrProxyAuthLoginPage);
    };

    [
        odl,
            uuid(25F2CE20-8B1D-4971-A7CD-549DAE201FC0),
            dual,
            oleautomation
    ]
        interface IMsRdpClientSecuredSettings2 : IMsRdpClientSecuredSettings {
        [id(0x00000006), propget]
            HRESULT PCB([out, retval] BSTR* bstrPCB);
        [id(0x00000006), propput]
            HRESULT PCB([in] BSTR bstrPCB);
    };

    [
        odl,
            uuid(92C38A7D-241A-418C-9936-099872C9AF20),
            hidden,
            dual,
            oleautomation
    ]
        interface ITSRemoteProgram2 : ITSRemoteProgram {
        [id(0x000000ca), propput]
            HRESULT RemoteApplicationName([in] BSTR rhs);
        [id(0x000000cb), propput]
            HRESULT RemoteApplicationProgram([in] BSTR rhs);
        [id(0x000000cc), propput]
            HRESULT RemoteApplicationArgs([in] BSTR rhs);
    };

    [
        odl,
            uuid(4F6996D5-D7B1-412C-B0FF-063718566907)
    ]
        interface IMsRdpClientNonScriptable5 : IMsRdpClientNonScriptable4 {
        [propput]
            HRESULT _stdcall UseMultimon([in] VARIANT_BOOL pfUseMultimon);
        [propget]
            HRESULT _stdcall UseMultimon([out, retval] VARIANT_BOOL* pfUseMultimon);
        [propget]
            HRESULT _stdcall RemoteMonitorCount([out, retval] unsigned long* pcRemoteMonitors);
        HRESULT _stdcall GetRemoteMonitorsBoundingBox(
            [out] long* pLeft,
            [out] long* pTop,
            [out] long* pRight,
            [out] long* pBottom);
        [propget]
            HRESULT _stdcall RemoteMonitorLayoutMatchesLocal([out, retval] VARIANT_BOOL* pfRemoteMatchesLocal);
        [propput]
            HRESULT _stdcall DisableConnectionBar([in] VARIANT_BOOL rhs);
        [propput]
            HRESULT _stdcall DisableRemoteAppCapsCheck([in] VARIANT_BOOL pfDisableRemoteAppCapsCheck);
        [propget]
            HRESULT _stdcall DisableRemoteAppCapsCheck([out, retval] VARIANT_BOOL* pfDisableRemoteAppCapsCheck);
        [propput]
            HRESULT _stdcall WarnAboutDirectXRedirection([in] VARIANT_BOOL pfWarn);
        [propget]
            HRESULT _stdcall WarnAboutDirectXRedirection([out, retval] VARIANT_BOOL* pfWarn);
        [propput]
            HRESULT _stdcall AllowPromptingForCredentials([in] VARIANT_BOOL pfAllow);
        [propget]
            HRESULT _stdcall AllowPromptingForCredentials([out, retval] VARIANT_BOOL* pfAllow);
    };

    [
        odl,
            uuid(FDD029F9-9574-4DEF-8529-64B521CCCAA4)
    ]
        interface IMsRdpPreferredRedirectionInfo : IUnknown {
        [propput]
            HRESULT _stdcall UseRedirectionServerName([in] VARIANT_BOOL pVal);
        [propget]
            HRESULT _stdcall UseRedirectionServerName([out, retval] VARIANT_BOOL* pVal);
    };

    [
        odl,
            uuid(302D8188-0052-4807-806A-362B628F9AC5)
    ]
        interface IMsRdpExtendedSettings : IUnknown {
        [propput]
            HRESULT _stdcall Property(
                [in] BSTR bstrPropertyName,
                [in] VARIANT* pValue);
        [propget]
            HRESULT _stdcall Property(
                [in] BSTR bstrPropertyName,
                [out, retval] VARIANT* pValue);
    };

    [
        uuid(A9D7038D-B5ED-472E-9C47-94BEA90A5910),
            helpstring("Microsoft RDP Client Control (redistributable) - version 8")
    ]
        coclass MsRdpClient7 {
        [default] interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(A3BC03A0-041D-42E3-AD22-882B7865C9C5),
            helpstring("Microsoft RDP Client Control - version 9")
    ]
        coclass MsRdpClient8NotSafeForScripting {
        [default] interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(4247E044-9271-43A9-BC49-E2AD9E855D62),
            dual,
            oleautomation
    ]
        interface IMsRdpClient8 : IMsRdpClient7 {
        [id(0x000002bc)]
            HRESULT SendRemoteAction([in] RemoteSessionActionType actionType);
        [id(0x000002bd), propget]
            HRESULT AdvancedSettings9([out, retval] IMsRdpClientAdvancedSettings8** ppAdvSettings);
        [id(0x000002be)]
            HRESULT Reconnect(
                [in] unsigned long ulWidth,
                [in] unsigned long ulHeight,
                [out, retval] ControlReconnectStatus* pReconnectStatus);
    };

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0000_0004 RemoteSessionActionType;

    typedef enum {
        RemoteSessionActionCharms = 0,
        RemoteSessionActionAppbar = 1,
        RemoteSessionActionSnap = 2,
        RemoteSessionActionStartScreen = 3,
        RemoteSessionActionAppSwitch = 4,
        RemoteSessionActionActionCenter = 5
    } __MIDL___MIDL_itf_mstsax_0000_0000_0004;

    [
        odl,
            uuid(89ACB528-2557-4D16-8625-226A30E97E9A),
            dual,
            oleautomation
    ]
        interface IMsRdpClientAdvancedSettings8 : IMsRdpClientAdvancedSettings7 {
        [id(0x000000ec), propput]
            HRESULT BandwidthDetection([in] VARIANT_BOOL pfAutodetect);
        [id(0x000000ec), propget]
            HRESULT BandwidthDetection([out, retval] VARIANT_BOOL* pfAutodetect);
        [id(0x000000ed), propput]
            HRESULT ClientProtocolSpec([in] ClientSpec pClientMode);
        [id(0x000000ed), propget]
            HRESULT ClientProtocolSpec([out, retval] ClientSpec* pClientMode);
    };

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0000_0003 ClientSpec;

    typedef enum {
        FullMode = 0,
        ThinClientMode = 1,
        SmallCacheMode = 2
    } __MIDL___MIDL_itf_mstsax_0000_0000_0003;

    typedef [public]
        __MIDL_IMsRdpClient8_0001 ControlReconnectStatus;

    typedef enum {
        controlReconnectStarted = 0,
        controlReconnectBlocked = 1
    } __MIDL_IMsRdpClient8_0001;

    [
        uuid(5F681803-2900-4C43-A1CC-CF405404A676),
            helpstring("Microsoft RDP Client Control (redistributable) - version 9")
    ]
        coclass MsRdpClient8 {
        [default] interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(8B918B82-7985-4C24-89DF-C33AD2BBFBCD),
            helpstring("Microsoft RDP Client Control - version 10")
    ]
        coclass MsRdpClient9NotSafeForScripting {
        [default] interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(28904001-04B6-436C-A55B-0AF1A0883DC9),
            dual,
            oleautomation
    ]
        interface IMsRdpClient9 : IMsRdpClient8 {
        [id(0x00000320), propget]
            HRESULT TransportSettings4([out, retval] IMsRdpClientTransportSettings4** ppXportSet4);
        [id(0x00000321)]
            HRESULT SyncSessionDisplaySettings();
        [id(0x00000322)]
            HRESULT UpdateSessionDisplaySettings(
                [in] unsigned long ulDesktopWidth,
                [in] unsigned long ulDesktopHeight,
                [in] unsigned long ulPhysicalWidth,
                [in] unsigned long ulPhysicalHeight,
                [in] unsigned long ulOrientation,
                [in] unsigned long ulDesktopScaleFactor,
                [in] unsigned long ulDeviceScaleFactor);
        [id(0x00000323)]
            HRESULT attachEvent(
                [in] BSTR eventName,
                [in] IDispatch* callback);
        [id(0x00000324)]
            HRESULT detachEvent(
                [in] BSTR eventName,
                [in] IDispatch* callback);
    };

    [
        odl,
            uuid(011C3236-4D81-4515-9143-067AB630D299),
            dual,
            oleautomation
    ]
        interface IMsRdpClientTransportSettings4 : IMsRdpClientTransportSettings3 {
        [id(0x000000e7), propput]
            HRESULT GatewayBrokeringType([in] unsigned long rhs);
    };

    [
        uuid(301B94BA-5D25-4A12-BFFE-3B6E7A616585),
            helpstring("Microsoft RDP Client Control (redistributable) - version 10")
    ]
        coclass MsRdpClient9 {
        [default] interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(A0C63C30-F08D-4AB4-907C-34905D770C7D),
            helpstring("Microsoft RDP Client Control - version 11")
    ]
        coclass MsRdpClient10NotSafeForScripting {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(7ED92C39-EB38-4927-A70A-708AC5A59321),
            dual,
            oleautomation
    ]
        interface IMsRdpClient10 : IMsRdpClient9 {
        [id(0x00000384), propget]
            HRESULT RemoteProgram3([out, retval] ITSRemoteProgram3** ppRemoteProgram);
    };

    [
        odl,
            uuid(4B84EA77-ACEA-418C-881A-4A8C28AB1510),
            hidden,
            dual,
            oleautomation
    ]
        interface ITSRemoteProgram3 : ITSRemoteProgram2 {
        [id(0x000000cd)]
            HRESULT ServerStartApp(
                [in] BSTR bstrAppUserModelId,
                [in] BSTR bstrArguments,
                [in] VARIANT_BOOL vbExpandEnvVarInArgumentsOnServer);
    };

    [
        uuid(C0EFA91A-EEB7-41C7-97FA-F0ED645EFB24),
            helpstring("Microsoft RDP Client Control (redistributable) - version 11")
    ]
        coclass MsRdpClient10 {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(1DF7C823-B2D4-4B54-975A-F2AC5D7CF8B8),
            helpstring("Microsoft RDP Client Control - version 12")
    ]
        coclass MsRdpClient11NotSafeForScripting {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpClientNonScriptable6;
        interface IMsRdpClientNonScriptable7;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(05293249-B28B-4BD8-BE64-1B2F496B910E)
    ]
        interface IMsRdpClientNonScriptable6 : IMsRdpClientNonScriptable5 {
        HRESULT _stdcall SendLocation2D(
            [in] double latitude,
            [in] double longitude);
        HRESULT _stdcall SendLocation3D(
            [in] double latitude,
            [in] double longitude,
            [in] int altitude);
    };

    [
        odl,
            uuid(71B4A60A-FE21-46D8-A39B-8E32BA0C5ECC)
    ]
        interface IMsRdpClientNonScriptable7 : IMsRdpClientNonScriptable6 {
        [propget]
            HRESULT _stdcall CameraRedirConfigCollection([out, retval] IMsRdpCameraRedirConfigCollection** ppCameraCollection);
        HRESULT _stdcall DisableDpiCursorScalingForProcess();
        [propget]
            HRESULT _stdcall Clipboard([out, retval] IMsRdpClipboard** ppClipboard);
    };

    [
        odl,
            uuid(AE45252B-AAAB-4504-B681-649D6073A37A)
    ]
        interface IMsRdpCameraRedirConfigCollection : IUnknown {
        HRESULT _stdcall Rescan();
        [propget]
            HRESULT _stdcall Count([out, retval] unsigned long* pCount);
        [propget]
            HRESULT _stdcall ByIndex(
                [in] unsigned long index,
                [out, retval] IMsRdpCameraRedirConfig** ppConfig);
        [propget]
            HRESULT _stdcall BySymbolicLink(
                [in] BSTR SymbolicLink,
                [out, retval] IMsRdpCameraRedirConfig** ppConfig);
        [propget]
            HRESULT _stdcall ByInstanceId(
                [in] BSTR InstanceId,
                [out, retval] IMsRdpCameraRedirConfig** ppConfig);
        HRESULT _stdcall AddConfig(
            [in] BSTR SymbolicLink,
            [in] VARIANT_BOOL fRedirected);
        [propput]
            HRESULT _stdcall RedirectByDefault([in] VARIANT_BOOL pfRedirect);
        [propget]
            HRESULT _stdcall RedirectByDefault([out, retval] VARIANT_BOOL* pfRedirect);
        [propput]
            HRESULT _stdcall EncodeVideo([in] VARIANT_BOOL pfEncode);
        [propget]
            HRESULT _stdcall EncodeVideo([out, retval] VARIANT_BOOL* pfEncode);
        [propput]
            HRESULT _stdcall EncodingQuality([in] CameraRedirEncodingQuality pEncodingQuality);
        [propget]
            HRESULT _stdcall EncodingQuality([out, retval] CameraRedirEncodingQuality* pEncodingQuality);
    };

    [
        odl,
            uuid(09750604-D625-47C1-9FCD-F09F735705D7)
    ]
        interface IMsRdpCameraRedirConfig : IUnknown {
        [propget]
            HRESULT _stdcall FriendlyName([out, retval] BSTR* pFriendlyName);
        [propget]
            HRESULT _stdcall SymbolicLink([out, retval] BSTR* pSymbolicLink);
        [propget]
            HRESULT _stdcall InstanceId([out, retval] BSTR* pInstanceId);
        [propget]
            HRESULT _stdcall ParentInstanceId([out, retval] BSTR* pParentInstanceId);
        [propput]
            HRESULT _stdcall Redirected([in] VARIANT_BOOL pfRedirected);
        [propget]
            HRESULT _stdcall Redirected([out, retval] VARIANT_BOOL* pfRedirected);
        [propget]
            HRESULT _stdcall DeviceExists([out, retval] VARIANT_BOOL* pfExists);
    };

    typedef [public]
        __MIDL___MIDL_itf_mstsax_0000_0008_0001 CameraRedirEncodingQuality;

    typedef enum {
        encodingQualityLow = 0,
        encodingQualityMedium = 1,
        encodingQualityHigh = 2
    } __MIDL___MIDL_itf_mstsax_0000_0008_0001;

    [
        odl,
            uuid(2E769EE8-00C7-43DC-AFD9-235D75B72A40)
    ]
        interface IMsRdpClipboard : IUnknown {
        HRESULT _stdcall CanSyncLocalClipboardToRemoteSession([out, retval] VARIANT_BOOL* pfSync);
        HRESULT _stdcall SyncLocalClipboardToRemoteSession();
        HRESULT _stdcall CanSyncRemoteClipboardToLocalSession([out, retval] VARIANT_BOOL* pfSync);
        HRESULT _stdcall SyncRemoteClipboardToLocalSession();
    };

    [
        uuid(22A7E88C-5BF5-4DE6-B687-60F7331DF190),
            helpstring("Microsoft RDP Client Control (redistributable) - version 12")
    ]
        coclass MsRdpClient11 {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpClientNonScriptable6;
        interface IMsRdpClientNonScriptable7;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(3F859AA3-C2D4-4FAA-B0E4-FD0C9C4E5E3A),
            helpstring("Microsoft RDP Client Control - version 13")
    ]
        coclass MsRdpClient12NotSafeForScripting {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpClientNonScriptable6;
        interface IMsRdpClientNonScriptable7;
        interface IMsRdpClientNonScriptable8;
        interface IMsRdpPreferredRedirectionInfo;
        interface IMsRdpExtendedSettings;
    };

    [
        odl,
            uuid(B2B3FA47-3F11-4148-AD24-DFF8684A16D0)
    ]
        interface IMsRdpClientNonScriptable8 : IMsRdpClientNonScriptable7 {
        [propget]
            HRESULT _stdcall CorrelationId([out, retval] GUID* CorrelationId);
        HRESULT _stdcall StartWorkspaceExtension(
            [in] VARIANT_BOOL isWebHosted,
            [in] BSTR workspaceId,
            [in] unsigned char* publisherThumbPrint,
            [in] unsigned int publisherThumbPrintLength);
        [propput]
            HRESULT _stdcall SupportsWorkspaceReconnect([in] VARIANT_BOOL rhs);
    };

    [
        uuid(945EE98E-B376-4EC2-B2E5-64C9410F93B7),
            helpstring("Microsoft RDP Client Control (redistributable) - version 13")
    ]
        coclass MsRdpClient12 {
        [default] interface IMsRdpClient10;
        interface IMsRdpClient9;
        interface IMsRdpClient8;
        interface IMsRdpClient7;
        interface IMsRdpClient6;
        interface IMsRdpClient5;
        interface IMsRdpClient4;
        interface IMsRdpClient3;
        interface IMsRdpClient2;
        interface IMsRdpClient;
        interface IMsTscAx;
        interface IMsTscAx_Redist;
        [default, source] dispinterface IMsTscAxEvents;
        interface IMsTscNonScriptable;
        interface IMsRdpClientNonScriptable;
        interface IMsRdpClientNonScriptable2;
        interface IMsRdpClientNonScriptable3;
        interface IMsRdpClientNonScriptable4;
        interface IMsRdpClientNonScriptable5;
        interface IMsRdpClientNonScriptable6;
        interface IMsRdpClientNonScriptable7;
        interface IMsRdpClientNonScriptable8;
        interface IMsRdpPreferredRedirectionInfo;
    };

    [
        uuid(079863B7-6D47-4105-8BFE-0CDCB360E67D)
    ]
        dispinterface IRemoteDesktopClientEvents{
            properties:
            methods:
                [id(0x000002ee)]
                void OnConnecting();
                [id(0x000002ef)]
                void OnConnected();
                [id(0x000002f0)]
                void OnLoginCompleted();
                [id(0x000002f1)]
                void OnDisconnected(
                                [in] long disconnectReason,
                                [in] long ExtendedDisconnectReason,
                                [in] BSTR disconnectErrorMessage);
                [id(0x000002f2)]
                void OnStatusChanged(
                                [in] long statusCode,
                                [in] BSTR statusMessage);
                [id(0x000002f3)]
                void OnAutoReconnecting(
                                [in] long disconnectReason,
                                [in] long ExtendedDisconnectReason,
                                [in] BSTR disconnectErrorMessage,
                                [in] VARIANT_BOOL networkAvailable,
                                [in] long attemptCount,
                                [in] long maxAttemptCount);
                [id(0x000002f4)]
                void OnAutoReconnected();
                [id(0x000002f5)]
                void OnDialogDisplaying();
                [id(0x000002f6)]
                void OnDialogDismissed();
                [id(0x000002f7)]
                void OnNetworkStatusChanged(
                                [in] unsigned long qualityLevel,
                                [in] long bandwidth,
                                [in] long rtt);
                [id(0x000002f8)]
                void OnAdminMessageReceived([in] BSTR adminMessage);
                [id(0x000002f9)]
                void OnKeyCombinationPressed([in] long keyCombination);
                [id(0x000002fa)]
                void OnRemoteDesktopSizeChanged(
                                [in] long width,
                                [in] long height);
                [id(0x00000320)]
                void OnTouchPointerCursorMoved(
                                [in] long x,
                                [in] long y);
    };

    [
        uuid(EAB16C5D-EED1-4E95-868B-0FBA1B42C092),
            helpstring("Microsoft Windows Store App Remote Desktop Client Control - version 1")
    ]
        coclass RemoteDesktopClient {
        [default] interface IRemoteDesktopClient;
        [default, source] dispinterface IRemoteDesktopClientEvents;
    };

    [
        odl,
            uuid(57D25668-625A-4905-BE4E-304CAA13F89C),
            dual,
            oleautomation
    ]
        interface IRemoteDesktopClient : IDispatch {
        [id(0x000002bd)]
            HRESULT Connect();
        [id(0x000002be)]
            HRESULT Disconnect();
        [id(0x000002bf)]
            HRESULT Reconnect(
                [in] unsigned long width,
                [in] unsigned long height);
        [id(0x000002c6), propget]
            HRESULT Settings([out, retval] IRemoteDesktopClientSettings** Settings);
        [id(0x000002c7), propget]
            HRESULT Actions([out, retval] IRemoteDesktopClientActions** Actions);
        [id(0x000002c8), propget]
            HRESULT TouchPointer([out, retval] IRemoteDesktopClientTouchPointer** TouchPointer);
        [id(0x000002c0)]
            HRESULT DeleteSavedCredentials([in] BSTR serverName);
        [id(0x000002c1)]
            HRESULT UpdateSessionDisplaySettings(
                [in] unsigned long width,
                [in] unsigned long height);
        [id(0x000002c2)]
            HRESULT attachEvent(
                [in] BSTR eventName,
                [in] IDispatch* callback);
        [id(0x000002c3)]
            HRESULT detachEvent(
                [in] BSTR eventName,
                [in] IDispatch* callback);
    };

    [
        odl,
            uuid(48A0F2A7-2713-431F-BBAC-6F4558E7D64D),
            dual,
            oleautomation
    ]
        interface IRemoteDesktopClientSettings : IDispatch {
        [id(0x000002d2)]
            HRESULT ApplySettings([in] BSTR RdpFileContents);
        [id(0x000002d3)]
            HRESULT RetrieveSettings([out, retval] BSTR* RdpFileContents);
        [id(0x000002d1)]
            HRESULT GetRdpProperty(
                [in] BSTR propertyName,
                [out, retval] VARIANT* Value);
        [id(0x000002d0)]
            HRESULT SetRdpProperty(
                [in] BSTR propertyName,
                [in] VARIANT Value);
    };

    [
        odl,
            uuid(7D54BC4E-1028-45D4-8B0A-B9B6BFFBA176),
            dual,
            oleautomation
    ]
        interface IRemoteDesktopClientActions : IDispatch {
        [id(0x000002da)]
            HRESULT SuspendScreenUpdates();
        [id(0x000002db)]
            HRESULT ResumeScreenUpdates();
        [id(0x000002dc)]
            HRESULT ExecuteRemoteAction([in] RemoteActionType remoteAction);
        [id(0x000002dd)]
            HRESULT GetSnapshot(
                [in] SnapshotEncodingType snapshotEncoding,
                [in] SnapshotFormatType snapshotFormat,
                [in] unsigned long snapshotWidth,
                [in] unsigned long snapshotHeight,
                [out, retval] BSTR* snapshotData);
    };

    typedef [public]
        __MIDL_IRemoteDesktopClientActions_0001 RemoteActionType;

    typedef enum {
        RemoteActionCharms = 0,
        RemoteActionAppbar = 1,
        RemoteActionSnap = 2,
        RemoteActionStartScreen = 3,
        RemoteActionAppSwitch = 4
    } __MIDL_IRemoteDesktopClientActions_0001;

    typedef [public]
        __MIDL_IRemoteDesktopClientActions_0002 SnapshotEncodingType;

    typedef enum {
        SnapshotEncodingDataUri = 0
    } __MIDL_IRemoteDesktopClientActions_0002;

    typedef [public]
        __MIDL_IRemoteDesktopClientActions_0003 SnapshotFormatType;

    typedef enum {
        SnapshotFormatPng = 0,
        SnapshotFormatJpeg = 1,
        SnapshotFormatBmp = 2
    } __MIDL_IRemoteDesktopClientActions_0003;

    [
        odl,
            uuid(260EC22D-8CBC-44B5-9E88-2A37F6C93AE9),
            dual,
            oleautomation
    ]
        interface IRemoteDesktopClientTouchPointer : IDispatch {
        [id(0x000002e4), propput]
            HRESULT Enabled([in] VARIANT_BOOL Enabled);
        [id(0x000002e4), propget]
            HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x000002e5), propput]
            HRESULT EventsEnabled([in] VARIANT_BOOL EventsEnabled);
        [id(0x000002e5), propget]
            HRESULT EventsEnabled([out, retval] VARIANT_BOOL* EventsEnabled);
        [id(0x000002e6), propput]
            HRESULT PointerSpeed([in] unsigned long PointerSpeed);
        [id(0x000002e6), propget]
            HRESULT PointerSpeed([out, retval] unsigned long* PointerSpeed);
    };
};
